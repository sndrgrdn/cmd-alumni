{"version":3,"sources":["js/mailchimp-form.js","index.js"],"names":["forms","document","querySelectorAll","i","length","setAttribute","hasError","field","disabled","type","validity","valid","valueMissing","typeMismatch","tooShort","getAttribute","value","tooLong","patternMismatch","hasAttribute","badInput","stepMismatch","rangeOverflow","rangeUnderflow","showError","error","classList","add","name","group","form","id","message","label","querySelector","createElement","className","parentNode","insertBefore","nextSibling","innerHTML","style","display","visibility","removeError","remove","removeAttribute","serialize","serialized","elements","checked","encodeURIComponent","window","displayMailChimpStatus","data","result","msg","mcStatus","submitMailChimpForm","url","replace","ref","getElementsByTagName","script","src","onload","addEventListener","event","target","contains","preventDefault","fields","hasErrors","focus"],"mappings":"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","file":"src.d994d012.js","sourceRoot":"../src","sourcesContent":["// Add the novalidate attribute when the JS loads\nvar forms = document.querySelectorAll('.validate');\nfor (var i = 0; i < forms.length; i++) {\n\tforms[i].setAttribute('novalidate', true);\n}\n\n// Validate the field\nvar hasError = function (field) {\n\n\t// Don't validate submits, buttons, file and reset inputs, and disabled fields\n\tif (field.disabled || field.type === 'file' || field.type === 'reset' || field.type === 'submit' || field.type === 'button') return;\n\n\t// Get validity\n\tvar validity = field.validity;\n\n\t// If valid, return null\n\tif (validity.valid) return;\n\n\t// If field is required and empty\n\tif (validity.valueMissing) return 'Please fill out this field.';\n\n\t// If not the right type\n\tif (validity.typeMismatch) {\n\n\t\t// Email\n\t\tif (field.type === 'email') return 'Please enter an email address.';\n\n\t\t// URL\n\t\tif (field.type === 'url') return 'Please enter a URL.';\n\n\t}\n\n\t// If too short\n\tif (validity.tooShort) return 'Please lengthen this text to ' + field.getAttribute('minLength') + ' characters or more. You are currently using ' + field.value.length + ' characters.';\n\n\t// If too long\n\tif (validity.tooLong) return 'Please shorten this text to no more than ' + field.getAttribute('maxLength') + ' characters. You are currently using ' + field.value.length + ' characters.';\n\n\t// If pattern doesn't match\n\tif (validity.patternMismatch) {\n\n\t\t// If pattern info is included, return custom error\n\t\tif (field.hasAttribute('title')) return field.getAttribute('title');\n\n\t\t// Otherwise, generic error\n\t\treturn 'Please match the requested format.';\n\n\t}\n\n\t// If number input isn't a number\n\tif (validity.badInput) return 'Please enter a number.';\n\n\t// If a number value doesn't match the step interval\n\tif (validity.stepMismatch) return 'Please select a valid value.';\n\n\t// If a number field is over the max\n\tif (validity.rangeOverflow) return 'Please select a value that is no more than ' + field.getAttribute('max') + '.';\n\n\t// If a number field is below the min\n\tif (validity.rangeUnderflow) return 'Please select a value that is no less than ' + field.getAttribute('min') + '.';\n\n\t// If all else fails, return a generic catchall error\n\treturn 'The value you entered for this field is invalid.';\n\n};\n\n// Show an error message\nvar showError = function (field, error) {\n\n\t// Add error class to field\n\tfield.classList.add('error');\n\n\t// If the field is a radio button and part of a group, error all and get the last item in the group\n\tif (field.type === 'radio' && field.name) {\n\t\tvar group = field.form.querySelectorAll('[name=\"' + field.name + '\"]');\n\t\tif (group.length > 0) {\n\t\t\tfor (var i = 0; i < group.length; i++) {\n\t\t\t\tgroup[i].classList.add('error');\n\t\t\t}\n\t\t\tfield = group[group.length - 1];\n\t\t}\n\t}\n\n\t// Get field id or name\n\tvar id = field.id || field.name;\n\tif (!id) return;\n\n\t// Check if error message field already exists\n\t// If not, create one\n\tvar message = field.form.querySelector('.invalid-feedback#error-for-' + id );\n\tif (!message) {\n\t\tmessage = document.createElement('div');\n\t\tmessage.className = 'invalid-feedback';\n\t\tmessage.id = 'error-for-' + id;\n\n\t\t// If the field is a radio button or checkbox, insert error after the label\n\t\tvar label;\n\t\tif (field.type === 'radio' || field.type ==='checkbox') {\n\t\t\tlabel = field.form.querySelector('label[for=\"' + id + '\"]') || field.parentNode;\n\t\t\tif (label) {\n\t\t\t\tlabel.parentNode.insertBefore( message, label.nextSibling );\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise, insert it after the field\n\t\tif (!label) {\n\t\t\tfield.parentNode.insertBefore( message, field.nextSibling );\n\t\t}\n\n\t}\n\n\t// Add ARIA role to the field\n\tfield.setAttribute('aria-describedby', 'error-for-' + id);\n\n\t// Update error message\n\tmessage.innerHTML = error;\n\n\t// Show error message\n\tmessage.style.display = 'block';\n\tmessage.style.visibility = 'visible';\n\n};\n\n// Remove the error message\nvar removeError = function (field) {\n\n\t// Remove error class to field\n\tfield.classList.remove('error');\n\n\t// Remove ARIA role from the field\n\tfield.removeAttribute('aria-describedby');\n\n\t// If the field is a radio button and part of a group, remove error from all and get the last item in the group\n\tif (field.type === 'radio' && field.name) {\n\t\tvar group = field.form.querySelectorAll('[name=\"' + field.name + '\"]');\n\t\tif (group.length > 0) {\n\t\t\tfor (var i = 0; i < group.length; i++) {\n\t\t\t\tgroup[i].classList.remove('error');\n\t\t\t}\n\t\t\tfield = group[group.length - 1];\n\t\t}\n\t}\n\n\t// Get field id or name\n\tvar id = field.id || field.name;\n\tif (!id) return;\n\n\n\t// Check if an error message is in the DOM\n\tvar message = field.form.querySelector('.invalid-feedback#error-for-' + id + '');\n\tif (!message) return;\n\n\t// If so, hide it\n\tmessage.innerHTML = '';\n\tmessage.style.display = 'none';\n\tmessage.style.visibility = 'hidden';\n\n};\n\n// Serialize the form data into a query string\n// Forked and modified from https://stackoverflow.com/a/30153391/1293256\nvar serialize = function (form) {\n\n\t// Setup our serialized data\n\tvar serialized = '';\n\n\t// Loop through each field in the form\n\tfor (i = 0; i < form.elements.length; i++) {\n\n\t\tvar field = form.elements[i];\n\n\t\t// Don't serialize fields without a name, submits, buttons, file and reset inputs, and disabled fields\n\t\tif (!field.name || field.disabled || field.type === 'file' || field.type === 'reset' || field.type === 'submit' || field.type === 'button') continue;\n\n\t\t// Convert field data to a query string\n\t\tif ((field.type !== 'checkbox' && field.type !== 'radio') || field.checked) {\n\t\t\tserialized += '&' + encodeURIComponent(field.name) + \"=\" + encodeURIComponent(field.value);\n\t\t}\n\t}\n\n\treturn serialized;\n\n};\n\n// Display the form status\nwindow.displayMailChimpStatus = function (data) {\n\n\t// Make sure the data is in the right format and that there's a status container\n\tif (!data.result || !data.msg || !mcStatus ) return;\n\n\t// Update our status message\n\tmcStatus.innerHTML = data.msg;\n\tmcStatus.classList.add('alert')\n\t// If error, add error class\n\tif (data.result === 'error') {\n\t\tmcStatus.classList.remove('alert-success');\n\t\tmcStatus.classList.add('alert-danger');\n\t\treturn;\n\t}\n\n\t// Otherwise, add success class\n\tmcStatus.classList.remove('alert-danger');\n\tmcStatus.classList.add('alert-success');\n};\n\n// Submit the form\nvar submitMailChimpForm = function (form) {\n\n\t// Get the Submit URL\n\tvar url = form.getAttribute('action');\n\turl = url.replace('/post?u=', '/post-json?u=');\n\turl += serialize(form) + '&c=displayMailChimpStatus';\n\n\t// Create script with url and callback (if specified)\n\tvar ref = window.document.getElementsByTagName( 'script' )[ 0 ];\n\tvar script = window.document.createElement( 'script' );\n\tscript.src = url;\n\n\t// Create a global variable for the status container\n\twindow.mcStatus = form.querySelector('.mc-status');\n\n\t// Insert script tag into the DOM (append to <head>)\n\tref.parentNode.insertBefore( script, ref );\n\n\t// After the script is loaded (and executed), remove it\n\tscript.onload = function () {\n\t\tthis.remove();\n\t};\n\n};\n\n// Listen to all blur events\ndocument.addEventListener('blur', function (event) {\n\n\t// Only run if the field is in a form to be validated\n\tif (!event.target.form.classList.contains('validate')) return;\n\n\t// Validate the field\n\tvar error = hasError(event.target);\n\n\t// If there's an error, show it\n\tif (error) {\n\t\tshowError(event.target, error);\n\t\treturn;\n\t}\n\n\t// Otherwise, remove any existing error message\n\tremoveError(event.target);\n\n}, true);\n\n// Check all fields on submit\ndocument.addEventListener('submit', function (event) {\n\n\t// Only run on forms flagged for validation\n\tif (!event.target.classList.contains('validate')) return;\n\n\t// Prevent form from submitting\n\tevent.preventDefault();\n\n\t// Get all of the form elements\n\tvar fields = event.target.elements;\n\n\t// Validate each field\n\t// Store the first field with an error to a variable so we can bring it into focus later\n\tvar error, hasErrors;\n\tfor (var i = 0; i < fields.length; i++) {\n\t\terror = hasError(fields[i]);\n\t\tif (error) {\n\t\t\tshowError(fields[i], error);\n\t\t\tif (!hasErrors) {\n\t\t\t\thasErrors = fields[i];\n\t\t\t}\n\t\t}\n\t}\n\n\t// If there are errrors, don't submit form and focus on first element with error\n\tif (hasErrors) {\n\t\thasErrors.focus();\n    return\n\t}\n\n\t// Otherwise, let the form submit normally\n\t// You could also bolt in an Ajax form submit process here\n\tsubmitMailChimpForm(event.target);\n\n}, false);\n","import \"./styles.scss\";\n\nimport './js/mailchimp-form'\n"]}